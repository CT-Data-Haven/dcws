% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data.R
\docType{data}
\name{cws_full_data}
\alias{cws_full_data}
\title{Contents of DataHaven Community Wellbeing Crosstabs}
\format{
A list of 385 data frames, each with 8 columns and varying numbers of rows:
\describe{
\item{year}{Numeric, endyear of survey (e.g. 2024)}
\item{span}{Character, span of years of the survey (e.g. "2015_2024")}
\item{name}{Text of location}
\item{survey}{List-column of data frames of survey response data. The number of rows varies based on the questions and participant groups available, but the 3 columns are the same.}
\item{code}{Question code, e.g. "Q2", "Q4E", "RENTEVICT"}
\item{category}{Factor: participant group categories, e.g. "Gender", "Age"}
\item{group}{Factor: participant group, e.g. "Male", "Ages 65+"}
\item{response}{Factor: text of responses, depending on question}
\item{value}{Share of participants giving each response}
}
}
\source{
Compiled DCWS crosstabs
}
\usage{
cws_full_data
}
\description{
This is a list of data frames; previously it was one data frame with 2 levels of nesting. Each data frame in the list represents a combination of survey endyear, timespan, and location, delimited with periods. For example, \code{cws_full_data[["2024.2015_2024.Greater New Haven"]]} holds the 2015-2024 pooled data for Greater New Haven. The switch from a nested data frame to a list of data frames was needed to speed things up as the extent of the survey and number of crosstabs has ballooned. This also used to include full text of every question, but those are now in the \code{cws_codebook} data frame.
}
\details{
The recommended way of accessing this data is using \code{fetch_cws}, which filters and combines it for you.
}
\examples{
# get specific question based on code
cws_full_data[["2024.2015_2024.Greater New Haven"]] |>
    dplyr::filter(code == "Q64")

# bind, then join with codebook to find question by text
cws_full_data[["2024.2015_2024.Greater New Haven"]] |>
    dplyr::left_join(cws_codebook, by = c("year", "code")) |>
    dplyr::filter(grepl("adequate shelter", question))

# make things easier with fetch_cws: flexibly grab by location, year, and/or
# filter conditions
fetch_cws(grepl("adequate shelter", question),
    .year = "2015_2024",
    .name = c("Connecticut", "Greater New Haven", "New Haven")
)
}
\seealso{
\code{\link[=fetch_cws]{fetch_cws()}}, \link{cws_codebook}
}
\keyword{datasets}
