[{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Fetching DCWS data","text":"want just location-wide values towns Greater New Haven, race Greater New Haven. filtering inside fetch_cws wanted dig nested data purrr, don’t, ’ll just little redundant. Usually like analyze questions separately might set responses, bank related questions can . 2020 added question trust several types institutions. can’t remember codes “trust” question text. Using cws_codebook dataset, can look codes pattern-matching. Oh duh, codes “TRUST” letter! responses questions great deal, fair amount, much, none . ’m going collapse great deal fair amount one, present just . question beginning text, end names institution asked . Lots ways chop data now ’ve got several groups several questions together. crosstabs include Connecticut total values compare . script extracts crosstab data includes , ’re sometimes useful: tables charts publish survey data one location includes state values. benefit want, say, Greater New Haven data, don’t anything special also Connecticut totals. However, pull data multiple locations, annoyingly redundant. ’ve added argument .drop_ct defaults true, case Connecticut values locations’ crosstabs dropped data returned. .drop_ct = TRUE (default): .drop_ct = FALSE:","code":"food_21 <- fetch_cws(grepl(\"Have there been times .+ food\", question),     .name = \"Greater New Haven\", .category = c(\"Total\", \"Race/Ethnicity\", \"Gender\"),     .year = 2021, .unnest = TRUE ) |>     calc_food()  knitr::kable(food_21) food_trend <- fetch_cws(grepl(\"Have there been times .+ food\", question),     .name = \"Greater New Haven\", .category = c(\"Total\", \"Race/Ethnicity\", \"Gender\"),     .unnest = TRUE ) |>     calc_food()  knitr::kable(food_trend) food_towns <- fetch_cws(grepl(\"Have there been times .+ food\", question),     .name = c(\"Greater New Haven\", cwi::regions$`Greater New Haven`),     .year = 2021, .unnest = TRUE ) |>     filter((name == \"Greater New Haven\" & category %in% c(\"Total\", \"Race/Ethnicity\")) |         (group %in% cwi::regions$`Greater New Haven`)) |>     calc_food() |>     mutate(category = as_factor(ifelse(name == \"Greater New Haven\",         as.character(category),         \"By town\"     )))  knitr::kable(food_towns) cws_codebook |>     filter(grepl(\"How much trust\", question)) |>     filter(year == 2024) |>     distinct(year, code, question) #> # A tibble: 5 × 3 #>    year code   question                                                          #>   <dbl> <chr>  <chr>                                                             #> 1  2024 TRUSTA How much trust do you have in each of the following to look out … #> 2  2024 TRUSTB How much trust do you have in each of the following to look out … #> 3  2024 TRUSTC How much trust do you have in each of the following to look out … #> 4  2024 TRUSTD How much trust do you have in each of the following to look out … #> 5  2024 TRUSTE How much trust do you have in each of the following to look out … trust_insts <- fetch_cws(grepl(\"^TRUST[A-Z]$\", code),     .name = \"Greater New Haven\", .year = 2021,     .category = c(\"Total\", \"Age\"), .unnest = TRUE ) |>     mutate(         response = fct_collapse(response, trust = c(\"A great deal\", \"A fair amount\")),         question = stringr::str_extract(question, \"([\\\\w\\\\s]+)$\") |>             trimws() |>             as_factor(),         group = fct_inorder(fct_drop(group))     ) |>     group_by(category, group, question, response) |>     summarise(value = sum(value)) |>     cwi::sub_nonanswers() |>     filter(response == \"trust\") |>     mutate(value = round(value, digits = 2)) |>     ungroup()  trust_insts |>     tidyr::pivot_wider(id_cols = group, names_from = question) |>     knitr::kable() fetch_cws(code == \"Q1\",     .year = 2021, .name = \"Greater New Haven\",     .category = c(\"Total\", \"Gender\"), .unnest = TRUE ) |>     distinct(year, name, category, group) #> # A tibble: 3 × 4 #>    year name              category group             #>   <dbl> <chr>             <fct>    <fct>             #> 1  2021 Greater New Haven Total    Greater New Haven #> 2  2021 Greater New Haven Gender   Male              #> 3  2021 Greater New Haven Gender   Female fetch_cws(code == \"Q1\",     .year = 2021, .name = \"Greater New Haven\",     .category = c(\"Total\", \"Gender\"), .unnest = TRUE, .drop_ct = FALSE ) |>     distinct(year, name, category, group) #> # A tibble: 4 × 4 #>    year name              category group             #>   <dbl> <chr>             <fct>    <fct>             #> 1  2021 Greater New Haven Total    Connecticut       #> 2  2021 Greater New Haven Total    Greater New Haven #> 3  2021 Greater New Haven Gender   Male              #> 4  2021 Greater New Haven Gender   Female"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"one-question-one-year-few-categories","dir":"Articles","previous_headings":"","what":"One question, one year, few categories","title":"Fetching DCWS data","text":"","code":"food_21 <- fetch_cws(grepl(\"Have there been times .+ food\", question),     .name = \"Greater New Haven\", .category = c(\"Total\", \"Race/Ethnicity\", \"Gender\"),     .year = 2021, .unnest = TRUE ) |>     calc_food()  knitr::kable(food_21)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"one-question-several-years-one-location","dir":"Articles","previous_headings":"","what":"One question, several years, one location","title":"Fetching DCWS data","text":"","code":"food_trend <- fetch_cws(grepl(\"Have there been times .+ food\", question),     .name = \"Greater New Haven\", .category = c(\"Total\", \"Race/Ethnicity\", \"Gender\"),     .unnest = TRUE ) |>     calc_food()  knitr::kable(food_trend)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"one-question-one-year-compare-groups-and-locations","dir":"Articles","previous_headings":"","what":"One question, one year, compare groups and locations","title":"Fetching DCWS data","text":"want just location-wide values towns Greater New Haven, race Greater New Haven. filtering inside fetch_cws wanted dig nested data purrr, don’t, ’ll just little redundant.","code":"food_towns <- fetch_cws(grepl(\"Have there been times .+ food\", question),     .name = c(\"Greater New Haven\", cwi::regions$`Greater New Haven`),     .year = 2021, .unnest = TRUE ) |>     filter((name == \"Greater New Haven\" & category %in% c(\"Total\", \"Race/Ethnicity\")) |         (group %in% cwi::regions$`Greater New Haven`)) |>     calc_food() |>     mutate(category = as_factor(ifelse(name == \"Greater New Haven\",         as.character(category),         \"By town\"     )))  knitr::kable(food_towns)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"several-questions-with-same-responses","dir":"Articles","previous_headings":"","what":"Several questions with same responses","title":"Fetching DCWS data","text":"Usually like analyze questions separately might set responses, bank related questions can . 2020 added question trust several types institutions. can’t remember codes “trust” question text. Using cws_codebook dataset, can look codes pattern-matching. Oh duh, codes “TRUST” letter! responses questions great deal, fair amount, much, none . ’m going collapse great deal fair amount one, present just . question beginning text, end names institution asked . Lots ways chop data now ’ve got several groups several questions together.","code":"cws_codebook |>     filter(grepl(\"How much trust\", question)) |>     filter(year == 2024) |>     distinct(year, code, question) #> # A tibble: 5 × 3 #>    year code   question                                                          #>   <dbl> <chr>  <chr>                                                             #> 1  2024 TRUSTA How much trust do you have in each of the following to look out … #> 2  2024 TRUSTB How much trust do you have in each of the following to look out … #> 3  2024 TRUSTC How much trust do you have in each of the following to look out … #> 4  2024 TRUSTD How much trust do you have in each of the following to look out … #> 5  2024 TRUSTE How much trust do you have in each of the following to look out … trust_insts <- fetch_cws(grepl(\"^TRUST[A-Z]$\", code),     .name = \"Greater New Haven\", .year = 2021,     .category = c(\"Total\", \"Age\"), .unnest = TRUE ) |>     mutate(         response = fct_collapse(response, trust = c(\"A great deal\", \"A fair amount\")),         question = stringr::str_extract(question, \"([\\\\w\\\\s]+)$\") |>             trimws() |>             as_factor(),         group = fct_inorder(fct_drop(group))     ) |>     group_by(category, group, question, response) |>     summarise(value = sum(value)) |>     cwi::sub_nonanswers() |>     filter(response == \"trust\") |>     mutate(value = round(value, digits = 2)) |>     ungroup()  trust_insts |>     tidyr::pivot_wider(id_cols = group, names_from = question) |>     knitr::kable()"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"comparing-to-the-state","dir":"Articles","previous_headings":"","what":"Comparing to the state","title":"Fetching DCWS data","text":"crosstabs include Connecticut total values compare . script extracts crosstab data includes , ’re sometimes useful: tables charts publish survey data one location includes state values. benefit want, say, Greater New Haven data, don’t anything special also Connecticut totals. However, pull data multiple locations, annoyingly redundant. ’ve added argument .drop_ct defaults true, case Connecticut values locations’ crosstabs dropped data returned. .drop_ct = TRUE (default): .drop_ct = FALSE:","code":"fetch_cws(code == \"Q1\",     .year = 2021, .name = \"Greater New Haven\",     .category = c(\"Total\", \"Gender\"), .unnest = TRUE ) |>     distinct(year, name, category, group) #> # A tibble: 3 × 4 #>    year name              category group             #>   <dbl> <chr>             <fct>    <fct>             #> 1  2021 Greater New Haven Total    Greater New Haven #> 2  2021 Greater New Haven Gender   Male              #> 3  2021 Greater New Haven Gender   Female fetch_cws(code == \"Q1\",     .year = 2021, .name = \"Greater New Haven\",     .category = c(\"Total\", \"Gender\"), .unnest = TRUE, .drop_ct = FALSE ) |>     distinct(year, name, category, group) #> # A tibble: 4 × 4 #>    year name              category group             #>   <dbl> <chr>             <fct>    <fct>             #> 1  2021 Greater New Haven Total    Connecticut       #> 2  2021 Greater New Haven Total    Greater New Haven #> 3  2021 Greater New Haven Gender   Male              #> 4  2021 Greater New Haven Gender   Female"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"weights","dir":"Articles","previous_headings":"","what":"Weights","title":"Fetching DCWS data","text":"crosstabs table survey weights group, either standalone section bottom Excel spreadsheet couple rows top question. read_weights now works either formats; latter, weights taken first question (always satisfied area question, every participant receives). Just like preparing package meant extracting data, ’s also stash weights files. useful operations like collapsing multiple small groups larger ones, usually income brackets groupings may consistent years locations otherwise. ’s function getting weights , arguments getting data… …can just use .add_wts argument fetch_cws . can also use cwi::collapse_n_wt help calculation, basically ’re collapsing several levels, getting weighted means. One reason locations might different income brackets depending sample size, ’ve moved toward using larger income brackets latest wave survey. addition sample size, might also collapse groups can compare across locations years. example, check obnoxious : Yikes ’ll probably want collapse , like :","code":"head(fetch_wts(.year = 2021, .name = \"Greater New Haven\", .unnest = TRUE)) #> # A tibble: 6 × 5 #>    year span  name              group             weight #>   <dbl> <chr> <chr>             <fct>              <dbl> #> 1  2021 2021  Greater New Haven Connecticut        1     #> 2  2021 2021  Greater New Haven Greater New Haven  1     #> 3  2021 2021  Greater New Haven Male               0.471 #> 4  2021 2021  Greater New Haven Female             0.529 #> 5  2021 2021  Greater New Haven Ages 18-34         0.313 #> 6  2021 2021  Greater New Haven Ages 35-49         0.238 satisfied_area <- fetch_cws(grepl(\"satisfied with the city\", question),     .name = c(\"Connecticut\", \"Greater New Haven\", \"New Haven\"),     .unnest = TRUE, .category = c(\"Total\", \"Income\") )  satisfied_area |>     filter(category == \"Income\") |>     distinct(year, name, group) |>     mutate(value = \"x\", id = paste(name, year)) |>     tidyr::pivot_wider(         id_cols = group,          names_from = id,          values_from = value,          names_sort = TRUE,          values_fill = \"\") |>     arrange(group) |>     knitr::kable() asthma18 <- fetch_cws(question == \"Asthma\",     .year = 2018, .name = \"Greater New Haven\",     .category = c(\"Total\", \"Income\", \"Race/Ethnicity\"), .add_wts = TRUE, .unnest = TRUE ) |>     cwi::collapse_n_wt(year:response,         .lvls = list(             \"<$30K\" = c(\"<$15K\", \"$15K-$30K\"),             \"$30K-$100K\" = c(\"$30K-$50K\", \"$50K-$75K\", \"$75K-$100K\"),             \"$100K+\" = c(\"$100K-$200K\", \"$200K+\")         )     ) |>     cwi::sub_nonanswers() |>     mutate(value = round(value, digits = 2)) |>     filter(response == \"Yes\")  knitr::kable(asthma18)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"single-year-vs-pooled-years","dir":"Articles","previous_headings":"","what":"Single year vs pooled years","title":"Fetching DCWS data","text":"One thing added 2024 survey set crosstabs multiple years, pooled together weighted accordingly. small locations groups small sample sizes, lets us get granularity single year. far 2024 year/endyear applies , presumably future survey waves available well. Usually argument year single number, year survey carried . Pooled crosstabs labeled endpoints, crosstabs made surveys 2015 2024 labeled \"2015_2024\". call fetch_cws, now 2 year-related columns: numeric one, year, last year crosstabs, character one, span, range years included. crosstabs 2024 data, say 2024, crosstabs 2015-2024 data, year 2024 span 2015_2024. want single-year data, give year single numeric year; want pooled data, give year \"{start_year}_{end_year}\" format. want single pooled data (probably don’t), can utilize filtering done ... argument instead, ’ll endyear 2024:","code":"fetch_cws(     code == \"Q1\",      .year = \"2015_2024\",      .name = \"New Haven\",      .category = \"Age\" )  #> # A tibble: 1 × 6 #>    year span      name      code  question                              data     #>   <dbl> <chr>     <chr>     <chr> <chr>                                 <list>   #> 1  2024 2015_2024 New Haven Q1    Are you satisfied with the city or a… <tibble> fetch_cws(     year == 2024,      code == \"Q1\",      .name = \"New Haven\",      .category = \"Age\" ) #> # A tibble: 2 × 6 #>    year span      name      code  question                              data     #>   <dbl> <chr>     <chr>     <chr> <chr>                                 <list>   #> 1  2024 2015_2024 New Haven Q1    Are you satisfied with the city or a… <tibble> #> 2  2024 2024      New Haven Q1    Are you satisfied with the city or a… <tibble>"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching-dcws-data.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Fetching DCWS data","text":"’s ! Usually ’ll save bunch related analyses lists data frames, write rds files easy loading.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Seaberry. Author, maintainer.","code":""},{"path":"https://ct-data-haven.github.io/dcws/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaberry C (2025). dcws: Data DataHaven Community Wellbeing Survey. R package version 0.1.6, https://ct-data-haven.github.io/dcws.","code":"@Manual{,   title = {dcws: Data from the DataHaven Community Wellbeing Survey},   author = {Camille Seaberry},   year = {2025},   note = {R package version 0.1.6},   url = {https://ct-data-haven.github.io/dcws}, }"},{"path":"https://ct-data-haven.github.io/dcws/index.html","id":"dcws","dir":"","previous_headings":"","what":"Data from the DataHaven Community Wellbeing Survey","title":"Data from the DataHaven Community Wellbeing Survey","text":"small data-focused package make easier use DataHaven Community Wellbeing Survey. contains data extracted crosstabs 2015, 2018, 2020, 2021, 2022, 2024 survey waves. 2020 2022 statewide .","code":""},{"path":"https://ct-data-haven.github.io/dcws/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data from the DataHaven Community Wellbeing Survey","text":"can install development version dcws GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"CT-Data-Haven/dcws\")"},{"path":"https://ct-data-haven.github.io/dcws/index.html","id":"included-data","dir":"","previous_headings":"","what":"Included data","title":"Data from the DataHaven Community Wellbeing Survey","text":"2025-02-26, data included :","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_cws_lvls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up categories and groups from crosstabs — clean_cws_lvls","title":"Clean up categories and groups from crosstabs — clean_cws_lvls","text":"bunch string cleaning standardize categories (Gender, Age, etc) groups (Male, Ages 65+, etc) across available crosstabs. operation categories groups overlap. lists regex replacements exported, hidden either: access dcws:::to_replace, dcws:::to_remove, dcws:::to_recode, dcws:::to_collapse need .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_cws_lvls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up categories and groups from crosstabs — clean_cws_lvls","text":"","code":"clean_cws_lvls(x, is_category = FALSE)"},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_cws_lvls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up categories and groups from crosstabs — clean_cws_lvls","text":"x vector. factor already, coerced one. is_category Boolean: FALSE, assume groups (e.g. \"High school less\", \"college Associate's\") rather categories (e.g. \"Education\").","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_cws_lvls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up categories and groups from crosstabs — clean_cws_lvls","text":"factor length x","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_cws_lvls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up categories and groups from crosstabs — clean_cws_lvls","text":"","code":"# vector of strings as read in from crosstabs categories <- c(     \"Connecticut\", \"NH Inner Ring\", \"Gender\", \"Age\",     \"Race/Ethnicity\", \"Education\", \"Income\", \"Children in HH\" ) levels(clean_cws_lvls(categories, is_category = TRUE)) #> [1] \"Connecticut\"          \"New Haven Inner Ring\" \"Gender\"               #> [4] \"Age\"                  \"Race/Ethnicity\"       \"Education\"            #> [7] \"Income\"               \"With children\"         groups <- c(     \"M\", \"F\", \"18-34\", \"35 to 49\", \"65 and older\",     \"Black/Afr Amer\", \"African American/Black\", \"High School\",     \"Less than $15,000\", \"$15,000 to $30,000\", \"No\" ) levels(clean_cws_lvls(groups)) #>  [1] \"Male\"        \"Female\"      \"Ages 18-34\"  \"Ages 35-49\"  \"Ages 65+\"    #>  [6] \"Black\"       \"High school\" \"<$15K\"       \"$15K-$30K\"   \"No kids\""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS codebook — cws_codebook","title":"DCWS codebook — cws_codebook","text":"data frame codes questions, corresponding possible responses, year survey. Previously part cws_full_data data frame, now split reduce redundancy save space. Note surveys identified year, span; pooled data use codes following endyears.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS codebook — cws_codebook","text":"","code":"cws_codebook"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS codebook — cws_codebook","text":"data frame 779 rows 4 variables: year Numeric, year survey code Character, question code question Character, full text survey question responses List character vectors, possible responses question","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_codebook.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS codebook — cws_codebook","text":"Compiled DCWS crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_codebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DCWS codebook — cws_codebook","text":"","code":"cws_codebook |>     dplyr::filter(grepl(\"adequate shelter\", question), year == 2024) |>     tidyr::unnest(responses) #> # A tibble: 4 × 4 #>    year code  question                                                 responses #>   <dbl> <chr> <chr>                                                    <chr>     #> 1  2024 Q64   In the last 12 months, have you not had enough money to… Yes       #> 2  2024 Q64   In the last 12 months, have you not had enough money to… No        #> 3  2024 Q64   In the last 12 months, have you not had enough money to… Don't kn… #> 4  2024 Q64   In the last 12 months, have you not had enough money to… Refused"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS indicator definitions — cws_defs","title":"DCWS indicator definitions — cws_defs","text":"data frame reference indicators defined, Likert questions get collapsed single number (e.g. strongly agree & somewhat agree –> percent agree). also complicated indicators, smoking rate underemployment, responses used calculate . Responses consistent across years.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS indicator definitions — cws_defs","text":"","code":"cws_defs"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_defs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS indicator definitions — cws_defs","text":"data frame 33 rows 3 variables: indicator Text abbreviated indicator name, e.g. \"safe biking\" question Text question given survey punctuation capital letters removed, e.g. \"places bicycle near neighborhood safe traffic street special lanes separate paths trails\" collapsed_responses Comma-separated text responses collapsed indicator, e.g. \"Strongly agree, Somewhat agree\".","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_defs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS indicator definitions — cws_defs","text":"Handwritten Camille upcoming glossary project","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DCWS indicator definitions — cws_defs","text":"","code":"cws_defs #> # A tibble: 33 × 3 #>    indicator                 question                        collapsed_responses #>    <chr>                     <chr>                           <chr>               #>  1 financial_insecurity      How well would you say you are… just getting by / … #>  2 food_insecurity           Have there been times in the p… NA                  #>  3 housing_insecurity        In the last 12 months, have yo… NA                  #>  4 transport_insecurity      In the past 12 months, did you… NA                  #>  5 car_access                Do you have access to a car wh… very often / fairl… #>  6 locations_in_walking_dist Many stores, banks, markets or… strongly agree / a… #>  7 safe_biking               There are places to bicycle in… strongly agree / a… #>  8 local_rec_facilities      My neighborhood has several fr… strongly agree / a… #>  9 safe_to_walk_at_night     I do not feel safe to go on wa… strongly disagree … #> 10 trust_neighbors           People in this neighborhood ca… strongly agree / a… #> # ℹ 23 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"nested data frame row corresponds year / set years location survey. data column contains full set data extracted respective crosstabs; , turn, nested question code. bit strange format, balances ease subsetting year location saving space avoiding repeated values (e.g. listing full question text dozens times). Previously data frame also included full text every question, size data ballooned, now cws_codebook data frame, can joined year code.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"","code":"cws_full_data"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"data frame 385 rows 4 columns.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"outer-structure-","dir":"Reference","previous_headings":"","what":"Outer structure:","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"year Numeric, year survey span Character, span years survey (e.g. \"2015_2024\") name Text location survey List-column data frames survey response data. number rows varies based questions participant groups available, 3 columns .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"for-the-survey-list-column-","dir":"Reference","previous_headings":"","what":"For the survey list-column:","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"code Question code, e.g. \"Q2\", \"Q4E\", \"RENTEVICT\" data List-column data frames, providing actual response values per question. , number rows varies, 4 columns .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"for-the-data-list-column-","dir":"Reference","previous_headings":"","what":"For the data list-column:","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"category Factor: participant group categories, e.g. \"Gender\", \"Age\" group Factor: participant group, e.g. \"Male\", \"Ages 65+\" response Text responses, depending question value Share participants giving response","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"Compiled DCWS crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":", structure probably annoying. Easier extraction available using fetch_cws.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"","code":"# get specific question based on code cws_full_data |>     dplyr::filter(span == \"2015_2024\", name == \"Greater New Haven\") |>     tidyr::unnest(survey) |>     dplyr::filter(code == \"Q64\") |>     tidyr::unnest(data) #> # A tibble: 76 × 8 #>     year span      name              code  category group       response   value #>    <dbl> <chr>     <chr>             <chr> <fct>    <fct>       <fct>      <dbl> #>  1  2024 2015_2024 Greater New Haven Q64   Total    Connecticut Yes      0.100   #>  2  2024 2015_2024 Greater New Haven Q64   Total    Connecticut No       0.894   #>  3  2024 2015_2024 Greater New Haven Q64   Total    Connecticut Don't k… 0.00152 #>  4  2024 2015_2024 Greater New Haven Q64   Total    Connecticut Refused  0.00410 #>  5  2024 2015_2024 Greater New Haven Q64   Total    Greater Ne… Yes      0.112   #>  6  2024 2015_2024 Greater New Haven Q64   Total    Greater Ne… No       0.882   #>  7  2024 2015_2024 Greater New Haven Q64   Total    Greater Ne… Don't k… 0.00175 #>  8  2024 2015_2024 Greater New Haven Q64   Total    Greater Ne… Refused  0.00395 #>  9  2024 2015_2024 Greater New Haven Q64   Gender   Male        Yes      0.112   #> 10  2024 2015_2024 Greater New Haven Q64   Gender   Male        No       0.882   #> # ℹ 66 more rows  # join first with codebook to find question by text cws_full_data |>     dplyr::filter(span == \"2015_2024\", name == \"Greater New Haven\") |>     tidyr::unnest(survey) |>     dplyr::left_join(cws_codebook, by = c(\"year\", \"code\")) |>     dplyr::filter(grepl(\"adequate shelter\", question)) |>     tidyr::unnest(data) #> # A tibble: 76 × 10 #>     year span     name  code  category group response   value question responses #>    <dbl> <chr>    <chr> <chr> <fct>    <fct> <fct>      <dbl> <chr>    <list>    #>  1  2024 2015_20… Grea… Q64   Total    Conn… Yes      0.100   In the … <chr [4]> #>  2  2024 2015_20… Grea… Q64   Total    Conn… No       0.894   In the … <chr [4]> #>  3  2024 2015_20… Grea… Q64   Total    Conn… Don't k… 0.00152 In the … <chr [4]> #>  4  2024 2015_20… Grea… Q64   Total    Conn… Refused  0.00410 In the … <chr [4]> #>  5  2024 2015_20… Grea… Q64   Total    Grea… Yes      0.112   In the … <chr [4]> #>  6  2024 2015_20… Grea… Q64   Total    Grea… No       0.882   In the … <chr [4]> #>  7  2024 2015_20… Grea… Q64   Total    Grea… Don't k… 0.00175 In the … <chr [4]> #>  8  2024 2015_20… Grea… Q64   Total    Grea… Refused  0.00395 In the … <chr [4]> #>  9  2024 2015_20… Grea… Q64   Gender   Male  Yes      0.112   In the … <chr [4]> #> 10  2024 2015_20… Grea… Q64   Gender   Male  No       0.882   In the … <chr [4]> #> # ℹ 66 more rows  # make things easier with fetch_cws: flexibly grab by location, year, and/or # filter conditions fetch_cws(grepl(\"adequate shelter\", question),     .year = \"2015_2024\",     .name = c(\"Connecticut\", \"Greater New Haven\", \"New Haven\") ) #> # A tibble: 3 × 6 #>    year span      name              code  question                      data     #>   <dbl> <chr>     <chr>             <chr> <chr>                         <list>   #> 1  2024 2015_2024 Connecticut       Q64   In the last 12 months, have … <tibble> #> 2  2024 2015_2024 Greater New Haven Q64   In the last 12 months, have … <tibble> #> 3  2024 2015_2024 New Haven         Q64   In the last 12 months, have … <tibble>"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS weights — cws_full_wts","title":"DCWS weights — cws_full_wts","text":"nested data frame containing survey's weights, used combining groups calculate average values. can joined DCWS data fetch_cws, manually. Note larger areas 2018 (maybe also 2015), groups might line data weights–check NAs weights column need .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS weights — cws_full_wts","text":"","code":"cws_full_wts"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS weights — cws_full_wts","text":"data frame 385 rows 4 variables: year Numeric, year survey span Character, span years survey (e.g. \"2015_2024\") name Text location weights list nested data frames, 2 columns group weight.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS weights — cws_full_wts","text":"Compiled DCWS crosstabs","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DCWS weights — cws_full_wts","text":"","code":"cws_full_wts #> # A tibble: 385 × 4 #>     year span  name               weights           #>    <dbl> <chr> <chr>              <list>            #>  1  2015 2015  5CT                <tibble [2 × 2]>  #>  2  2015 2015  Bridgeport         <tibble [21 × 2]> #>  3  2015 2015  Bristol            <tibble [14 × 2]> #>  4  2015 2015  Greater Waterbury  <tibble [25 × 2]> #>  5  2015 2015  Connecticut        <tibble [27 × 2]> #>  6  2015 2015  Greater Hartford   <tibble [24 × 2]> #>  7  2015 2015  Danbury            <tibble [18 × 2]> #>  8  2015 2015  Fairfield County   <tibble [27 × 2]> #>  9  2015 2015  Greater Bridgeport <tibble [25 × 2]> #> 10  2015 2015  Greater New Haven  <tibble [25 × 2]> #> # ℹ 375 more rows  cws_full_wts |>     dplyr::filter(name == \"Greater New Haven\") |>     tidyr::unnest(weights) #> # A tibble: 118 × 5 #>     year span  name              group             weight #>    <dbl> <chr> <chr>             <fct>              <dbl> #>  1  2015 2015  Greater New Haven Connecticut        1     #>  2  2015 2015  Greater New Haven Greater New Haven  1     #>  3  2015 2015  Greater New Haven Male               0.47  #>  4  2015 2015  Greater New Haven Female             0.53  #>  5  2015 2015  Greater New Haven Ages 18-34         0.292 #>  6  2015 2015  Greater New Haven Ages 35-49         0.244 #>  7  2015 2015  Greater New Haven Ages 50-64         0.236 #>  8  2015 2015  Greater New Haven Ages 65+           0.173 #>  9  2015 2015  Greater New Haven White              0.727 #> 10  2015 2015  Greater New Haven Black              0.158 #> # ℹ 108 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_group_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS group metadata — cws_group_meta","title":"DCWS group metadata — cws_group_meta","text":"reference dataset listing categories groups available survey year location. questions available groups, groups available every year every location.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_group_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS group metadata — cws_group_meta","text":"","code":"cws_group_meta"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_group_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS group metadata — cws_group_meta","text":"data frame 385 rows 4 variables: year Numeric, year survey span Character, span years survey (e.g. \"2015_2024\") name Text location groups list nested data frames, 2 columns category group.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_group_meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS group metadata — cws_group_meta","text":"Compiled DCWS crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_group_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DCWS group metadata — cws_group_meta","text":"","code":"# larger areas have more groups available each year (see number of rows per nested tibble) cws_group_meta #> # A tibble: 385 × 4 #>     year span  name               groups            #>    <dbl> <chr> <chr>              <list>            #>  1  2015 2015  5CT                <tibble [6 × 2]>  #>  2  2015 2015  Bridgeport         <tibble [21 × 2]> #>  3  2015 2015  Bristol            <tibble [14 × 2]> #>  4  2015 2015  Connecticut        <tibble [26 × 2]> #>  5  2015 2015  Danbury            <tibble [18 × 2]> #>  6  2015 2015  Fairfield County   <tibble [26 × 2]> #>  7  2015 2015  Greater Bridgeport <tibble [25 × 2]> #>  8  2015 2015  Greater Hartford   <tibble [24 × 2]> #>  9  2015 2015  Greater New Haven  <tibble [25 × 2]> #> 10  2015 2015  Greater New London <tibble [23 × 2]> #> # ℹ 375 more rows  cws_group_meta |>     dplyr::filter(name == \"Greater New Haven\") |>     tidyr::unnest(groups) #> # A tibble: 114 × 5 #>     year span  name              category       group             #>    <dbl> <chr> <chr>             <fct>          <fct>             #>  1  2015 2015  Greater New Haven Total          Connecticut       #>  2  2015 2015  Greater New Haven Total          Greater New Haven #>  3  2015 2015  Greater New Haven Gender         Male              #>  4  2015 2015  Greater New Haven Gender         Female            #>  5  2015 2015  Greater New Haven Age            Ages 18-34        #>  6  2015 2015  Greater New Haven Age            Ages 35-49        #>  7  2015 2015  Greater New Haven Age            Ages 50-64        #>  8  2015 2015  Greater New Haven Age            Ages 65+          #>  9  2015 2015  Greater New Haven Race/Ethnicity White             #> 10  2015 2015  Greater New Haven Race/Ethnicity Black             #> # ℹ 104 more rows  # this is useful if you want to know what locations have data for a certain # set of conditions, e.g. 2021 values by income cws_group_meta |>     tidyr::unnest(groups) |>     dplyr::filter(year == 2021, category == \"Income\") #> # A tibble: 96 × 5 #>     year span  name        category group      #>    <dbl> <chr> <chr>       <fct>    <fct>      #>  1  2021 2021  Bridgeport  Income   <$30K      #>  2  2021 2021  Bridgeport  Income   $30K-$100K #>  3  2021 2021  Bridgeport  Income   $100K+     #>  4  2021 2021  Connecticut Income   <$30K      #>  5  2021 2021  Connecticut Income   $30K-$100K #>  6  2021 2021  Connecticut Income   $100K+     #>  7  2021 2021  Danbury     Income   <$30K      #>  8  2021 2021  Danbury     Income   $30K-$100K #>  9  2021 2021  Danbury     Income   $100K+     #> 10  2021 2021  EHHD        Income   <$30K      #> # ℹ 86 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_max_moe.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS maximum margins of error — cws_max_moe","title":"DCWS maximum margins of error — cws_max_moe","text":"data frame listing maximum margin error estimates location year. values extracted headers crosstab spreadsheets, many missing, especially 2015. unlikely anyone need often beyond community profiles website, filtered subset locations main data weights datasets.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_max_moe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS maximum margins of error — cws_max_moe","text":"","code":"cws_max_moe"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_max_moe.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS maximum margins of error — cws_max_moe","text":"data frame 385 rows 4 variables: year Numeric, year survey span Character, span years survey (e.g. \"2015_2024\") name Text location moe Numeric, value maximum MOE","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_max_moe.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS maximum margins of error — cws_max_moe","text":"Compiled DCWS crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_max_moe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DCWS maximum margins of error — cws_max_moe","text":"","code":"cws_max_moe #> # A tibble: 385 × 4 #>     year span  name                 moe #>    <dbl> <chr> <chr>              <dbl> #>  1  2015 2015  5CT                0.011 #>  2  2015 2015  Bridgeport         0.036 #>  3  2015 2015  Bristol            0.068 #>  4  2015 2015  Greater Waterbury  0.027 #>  5  2015 2015  Connecticut        0.011 #>  6  2015 2015  Greater Hartford   0.023 #>  7  2015 2015  Danbury            0.06  #>  8  2015 2015  Fairfield County   0.019 #>  9  2015 2015  Greater Bridgeport 0.027 #> 10  2015 2015  Greater New Haven  0.031 #> # ℹ 375 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/dcws-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dcws: Data from the DataHaven Community Wellbeing Survey — dcws-package","title":"dcws: Data from the DataHaven Community Wellbeing Survey — dcws-package","text":"collection data past years DCWS, plus bit metadata functions extracting subsets data.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/dcws-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dcws: Data from the DataHaven Community Wellbeing Survey — dcws-package","text":"Maintainer: Camille Seaberry camille@ctdatahaven.org","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and subset DCWS data — fetch_cws","title":"Fetch and subset DCWS data — fetch_cws","text":"function returns doubly-nested data cws_full_data nicer format, options subsetting. Filtering year, location name, category named options, take vector one values, valid conditions can passed ... flexible filtering. named options, NULL, default, mean filtering done column.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and subset DCWS data — fetch_cws","text":"","code":"fetch_cws(   ...,   .year = NULL,   .name = NULL,   .category = NULL,   .unnest = FALSE,   .add_wts = FALSE,   .drop_ct = TRUE,   .incl_questions = TRUE )"},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and subset DCWS data — fetch_cws","text":"... number conditions filter , passed dplyr::filter. override named options, filter year > 2020 set .year = 2015 going get data. .year vector one year(s) subset . character contains separator (\"_\", \"-\", space character), assumed span years, multi-year pooled crosstabs (e.g. \"2015_2024\"). Otherwise assumed single year survey. NULL, filtering done year. .name vector one strings giving name(s) subset . NULL, filtering done name. .category vector one strings giving category(ies) subset . NULL, filtering done category. .unnest Boolean: data column unnested? just saves step calling tidyr::unnest defaults false. .add_wts Boolean: groups' survey weights attached, via left-join dcws::cws_full_wts? useful need collapse groups later; otherwise might get stuck annoying tidyr::unnest messes. .drop_ct Boolean: statewide totals included crosstab extract? can useful single location order Connecticut values compare , becomes redundant multiple locations. default TRUE means statewide averages included. .incl_questions Boolean: full text question included? FALSE, questions demarcated just codes, take less space can change year year. Defaults TRUE.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and subset DCWS data — fetch_cws","text":"data frame, 5 10 columns, depending arguments. Columns year, span, name, , code always included; question included .incl_questions = TRUE. .unnest = TRUE, crosstab data columns category, group, response, value; .add_wts = TRUE, weight well. .unnest = FALSE, columns (category weight) nested data frame, column called data. Note span column, new addition, string giving span years included set survey data. single years, year; case pooled dataset 2015-2024, year 2024 span \"2015_2024\".","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and subset DCWS data — fetch_cws","text":"","code":"# no filtering if (FALSE) { # \\dontrun{ fetch_cws() } # }  # filter by year, name, and/or category fetch_cws(.name = c(\"Greater New Haven\", \"New Haven\")) # all years #> # A tibble: 1,217 × 6 #>     year span  name              code  question                         data     #>    <dbl> <chr> <chr>             <chr> <chr>                            <list>   #>  1  2015 2015  Greater New Haven Q1    Are you satisfied with the city… <tibble> #>  2  2015 2015  Greater New Haven Q2    As a place to live, is the city… <tibble> #>  3  2015 2015  Greater New Haven Q3A   How responsive local government… <tibble> #>  4  2015 2015  Greater New Haven Q3B   The availability of the goods a… <tibble> #>  5  2015 2015  Greater New Haven Q3C   The job done by the police to k… <tibble> #>  6  2015 2015  Greater New Haven Q3D   The ability of residents to obt… <tibble> #>  7  2015 2015  Greater New Haven Q3E   As a place to raise children     <tibble> #>  8  2015 2015  Greater New Haven Q3F   The condition of public parks a… <tibble> #>  9  2015 2015  Greater New Haven Q4    Over the past 12 months, have y… <tibble> #> 10  2015 2015  Greater New Haven Q5    How would you describe your abi… <tibble> #> # ℹ 1,207 more rows fetch_cws(.year = 2018, .name = c(\"Greater New Haven\", \"New Haven\")) #> # A tibble: 290 × 6 #>     year span  name              code  question                         data     #>    <dbl> <chr> <chr>             <chr> <chr>                            <list>   #>  1  2018 2018  Greater New Haven Q1    Are you satisfied with the city… <tibble> #>  2  2018 2018  Greater New Haven Q2    As a place to live, is the city… <tibble> #>  3  2018 2018  Greater New Haven Q4A   How responsive local government… <tibble> #>  4  2018 2018  Greater New Haven Q4D   The job done by the police to k… <tibble> #>  5  2018 2018  Greater New Haven Q4E   The ability of residents to obt… <tibble> #>  6  2018 2018  Greater New Haven Q4F   As a place to raise children     <tibble> #>  7  2018 2018  Greater New Haven Q4G   The condition of public parks a… <tibble> #>  8  2018 2018  Greater New Haven Q4H   The availability of affordable,… <tibble> #>  9  2018 2018  Greater New Haven Q5    Over the past 12 months, have y… <tibble> #> 10  2018 2018  Greater New Haven Q6    How would you describe your abi… <tibble> #> # ℹ 280 more rows fetch_cws(.year = 2021, .name = \"New Haven\", .category = c(\"Total\", \"Age\", \"Gender\")) #> # A tibble: 135 × 6 #>     year span  name      code   question                                data     #>    <dbl> <chr> <chr>     <chr>  <chr>                                   <list>   #>  1  2021 2021  New Haven Q1     Are you satisfied with the city or are… <tibble> #>  2  2021 2021  New Haven Q2     As a place to live, is the city or are… <tibble> #>  3  2021 2021  New Haven Q4A    How responsive local government is to … <tibble> #>  4  2021 2021  New Haven Q4D    The job done by the police to keep res… <tibble> #>  5  2021 2021  New Haven Q4E    The ability of residents to obtain sui… <tibble> #>  6  2021 2021  New Haven Q4F    As a place to raise children            <tibble> #>  7  2021 2021  New Haven Q4G    The condition of public parks and othe… <tibble> #>  8  2021 2021  New Haven Q4H    The availability of affordable, high-q… <tibble> #>  9  2021 2021  New Haven Q6     How would you describe your ability to… <tibble> #> 10  2021 2021  New Haven TRUSTA How much trust do you have in each of … <tibble> #> # ℹ 125 more rows  # filter by conditions fetch_cws(code == \"Q4E\", .year = 2018, .name = c(\"Greater New Haven\", \"New Haven\"), .unnest = TRUE) #> # A tibble: 240 × 9 #>     year span  name              code  question    category group response value #>    <dbl> <chr> <chr>             <chr> <chr>       <fct>    <fct> <fct>    <dbl> #>  1  2018 2018  Greater New Haven Q4E   The abilit… Total    Grea… Excelle…  0.08 #>  2  2018 2018  Greater New Haven Q4E   The abilit… Total    Grea… Good      0.34 #>  3  2018 2018  Greater New Haven Q4E   The abilit… Total    Grea… Fair      0.32 #>  4  2018 2018  Greater New Haven Q4E   The abilit… Total    Grea… Poor      0.11 #>  5  2018 2018  Greater New Haven Q4E   The abilit… Total    Grea… Don't k…  0.14 #>  6  2018 2018  Greater New Haven Q4E   The abilit… Total    Grea… Refused   0    #>  7  2018 2018  Greater New Haven Q4E   The abilit… Gender   Male  Excelle…  0.08 #>  8  2018 2018  Greater New Haven Q4E   The abilit… Gender   Male  Good      0.35 #>  9  2018 2018  Greater New Haven Q4E   The abilit… Gender   Male  Fair      0.33 #> 10  2018 2018  Greater New Haven Q4E   The abilit… Gender   Male  Poor      0.12 #> # ℹ 230 more rows fetch_cws(grepl(\"Q4[A-Z]\", code), .year = 2018, .name = c(\"Greater New Haven\", \"New Haven\")) #> # A tibble: 12 × 6 #>     year span  name              code  question                         data     #>    <dbl> <chr> <chr>             <chr> <chr>                            <list>   #>  1  2018 2018  Greater New Haven Q4A   How responsive local government… <tibble> #>  2  2018 2018  Greater New Haven Q4D   The job done by the police to k… <tibble> #>  3  2018 2018  Greater New Haven Q4E   The ability of residents to obt… <tibble> #>  4  2018 2018  Greater New Haven Q4F   As a place to raise children     <tibble> #>  5  2018 2018  Greater New Haven Q4G   The condition of public parks a… <tibble> #>  6  2018 2018  Greater New Haven Q4H   The availability of affordable,… <tibble> #>  7  2018 2018  New Haven         Q4A   How responsive local government… <tibble> #>  8  2018 2018  New Haven         Q4D   The job done by the police to k… <tibble> #>  9  2018 2018  New Haven         Q4E   The ability of residents to obt… <tibble> #> 10  2018 2018  New Haven         Q4F   As a place to raise children     <tibble> #> 11  2018 2018  New Haven         Q4G   The condition of public parks a… <tibble> #> 12  2018 2018  New Haven         Q4H   The availability of affordable,… <tibble> fetch_cws(grepl(\"health insurance\", question), year > 2015, .name = \"New Haven\") #> # A tibble: 14 × 6 #>     year span      name      code   question                            data     #>    <dbl> <chr>     <chr>     <chr>  <chr>                               <list>   #>  1  2018 2018      New Haven Q26    Do you have health insurance?       <tibble> #>  2  2018 2018      New Haven Q27    (If have health insurance) What ty… <tibble> #>  3  2018 2018      New Haven Q30B   The doctor or hospital wouldn't ac… <tibble> #>  4  2021 2021      New Haven Q26    Do you have health insurance?       <tibble> #>  5  2021 2021      New Haven Q27    (If yes) What type of health insur… <tibble> #>  6  2024 2015_2024 New Haven Q26    Do you have health insurance?       <tibble> #>  7  2024 2015_2024 New Haven Q27    (If yes to Do you have health insu… <tibble> #>  8  2024 2015_2024 New Haven Q30B   (Did you not get the medical care … <tibble> #>  9  2024 2024      New Haven Q26    Do you have health insurance?       <tibble> #> 10  2024 2024      New Haven Q27    (If yes to Do you have health insu… <tibble> #> 11  2024 2024      New Haven Q30B   (Did you not get the medical care … <tibble> #> 12  2024 2024      New Haven MENTHC (If yes to During the past 12 mont… <tibble> #> 13  2024 2024      New Haven MENTHD (If yes to During the past 12 mont… <tibble> #> 14  2024 2024      New Haven HCAS   CALCULATED: Health care access sco… <tibble> fetch_cws(question %in% c(\"Diabetes\", \"Asthma\"), .name = \"Bridgeport\") #> # A tibble: 10 × 6 #>     year span      name       code  question data               #>    <dbl> <chr>     <chr>      <chr> <chr>    <list>             #>  1  2015 2015      Bridgeport Q23C  Diabetes <tibble [80 × 4]>  #>  2  2015 2015      Bridgeport Q23E  Asthma   <tibble [80 × 4]>  #>  3  2018 2018      Bridgeport Q23C  Diabetes <tibble [72 × 4]>  #>  4  2018 2018      Bridgeport Q23E  Asthma   <tibble [72 × 4]>  #>  5  2021 2021      Bridgeport Q23C  Diabetes <tibble [72 × 4]>  #>  6  2021 2021      Bridgeport Q23E  Asthma   <tibble [72 × 4]>  #>  7  2024 2015_2024 Bridgeport Q23C  Diabetes <tibble [72 × 4]>  #>  8  2024 2015_2024 Bridgeport Q23E  Asthma   <tibble [72 × 4]>  #>  9  2024 2024      Bridgeport Q23C  Diabetes <tibble [104 × 4]> #> 10  2024 2024      Bridgeport Q23E  Asthma   <tibble [104 × 4]>  # how you might use this to make a beautiful table fetch_cws(code == \"Q1\", .year = 2021, .category = c(\"Income\", \"Gender\"), .unnest = TRUE) |>     dplyr::group_by(name, category, group) |>     # might want to remove refused, don't know responses     # cwi::sub_nonanswers() |>     dplyr::filter(response == \"Yes\") |>     tidyr::pivot_wider(id_cols = name, names_from = group, values_from = value) #> # A tibble: 34 × 6 #> # Groups:   name [34] #>    name               Male Female `<$30K` `$30K-$100K` `$100K+` #>    <chr>             <dbl>  <dbl>   <dbl>        <dbl>    <dbl> #>  1 Bridgeport         0.78   0.77    0.75         0.77     0.79 #>  2 Bristol            0.78   0.87   NA           NA       NA    #>  3 Connecticut        0.87   0.88    0.79         0.87     0.91 #>  4 Danbury            0.94   0.91    0.99         0.94     0.92 #>  5 Darien             0.95   0.93   NA           NA       NA    #>  6 EHHD               0.93   0.93    0.81         0.98     0.95 #>  7 Fairfield          0.88   0.88    0.69         0.79     0.96 #>  8 Fairfield County   0.87   0.89    0.79         0.88     0.92 #>  9 Greater Hartford   0.88   0.89    0.82         0.89     0.95 #> 10 Greater New Haven  0.86   0.87    0.82         0.89     0.87 #> # ℹ 24 more rows  # adding weights to collapse groups (e.g. combining income brackets) fetch_cws(code == \"Q1\", .year = 2021, .add_wts = TRUE) #> # A tibble: 35 × 6 #>     year span  name              code  question                         data     #>    <dbl> <chr> <chr>             <chr> <chr>                            <list>   #>  1  2021 2021  Bridgeport        Q1    Are you satisfied with the city… <tibble> #>  2  2021 2021  Bristol           Q1    Are you satisfied with the city… <tibble> #>  3  2021 2021  Connecticut       Q1    Are you satisfied with the city… <tibble> #>  4  2021 2021  Danbury           Q1    Are you satisfied with the city… <tibble> #>  5  2021 2021  Darien            Q1    Are you satisfied with the city… <tibble> #>  6  2021 2021  EHHD              Q1    Are you satisfied with the city… <tibble> #>  7  2021 2021  Fairfield         Q1    Are you satisfied with the city… <tibble> #>  8  2021 2021  Fairfield County  Q1    Are you satisfied with the city… <tibble> #>  9  2021 2021  Greater Hartford  Q1    Are you satisfied with the city… <tibble> #> 10  2021 2021  Greater New Haven Q1    Are you satisfied with the city… <tibble> #> # ℹ 25 more rows fetch_cws(     .year = 2021, .name = \"New Haven\", .category = c(\"Total\", \"Age\", \"Income\"),     .add_wts = TRUE, .unnest = TRUE ) #> # A tibble: 3,294 × 10 #>     year span  name      code  question     category group response value weight #>    <dbl> <chr> <chr>     <chr> <chr>        <fct>    <fct> <fct>    <dbl>  <dbl> #>  1  2021 2021  New Haven Q1    Are you sat… Total    New … Yes       0.82  1     #>  2  2021 2021  New Haven Q1    Are you sat… Total    New … No        0.17  1     #>  3  2021 2021  New Haven Q1    Are you sat… Total    New … Don't k…  0.01  1     #>  4  2021 2021  New Haven Q1    Are you sat… Total    New … Refused   0     1     #>  5  2021 2021  New Haven Q1    Are you sat… Age      Ages… Yes       0.8   0.456 #>  6  2021 2021  New Haven Q1    Are you sat… Age      Ages… No        0.2   0.456 #>  7  2021 2021  New Haven Q1    Are you sat… Age      Ages… Don't k…  0     0.456 #>  8  2021 2021  New Haven Q1    Are you sat… Age      Ages… Refused   0     0.456 #>  9  2021 2021  New Haven Q1    Are you sat… Age      Ages… Yes       0.82  0.219 #> 10  2021 2021  New Haven Q1    Are you sat… Age      Ages… No        0.18  0.219 #> # ℹ 3,284 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and subset weights for DCWS data — fetch_wts","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"function returns nested cws_full_wts data, meant counterpart fetch_cws.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"","code":"fetch_wts(..., .year = NULL, .name = NULL, .unnest = FALSE)"},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"... number conditions filter , passed dplyr::filter. override named options, filter year > 2020 set .year = 2015 going get data. .year vector one year(s) subset . character contains separator (\"_\", \"-\", space character), assumed span years, multi-year pooled crosstabs (e.g. \"2015_2024\"). Otherwise assumed single year survey. NULL, filtering done year. .name vector one strings giving name(s) subset . NULL, filtering done name. .unnest Boolean: data column unnested? just saves step calling tidyr::unnest defaults false.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"data frame, either 3 columns (.unnest = FALSE) 4 columns (.unnest = TRUE). .unnest = FALSE: columns year, name, list nested data frames weights .unnest = TRUE: year, name, group, weight","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"","code":"# no filtering fetch_wts() #> # A tibble: 385 × 4 #>     year span  name               weights           #>    <dbl> <chr> <chr>              <list>            #>  1  2015 2015  5CT                <tibble [2 × 2]>  #>  2  2015 2015  Bridgeport         <tibble [21 × 2]> #>  3  2015 2015  Bristol            <tibble [14 × 2]> #>  4  2015 2015  Greater Waterbury  <tibble [25 × 2]> #>  5  2015 2015  Connecticut        <tibble [27 × 2]> #>  6  2015 2015  Greater Hartford   <tibble [24 × 2]> #>  7  2015 2015  Danbury            <tibble [18 × 2]> #>  8  2015 2015  Fairfield County   <tibble [27 × 2]> #>  9  2015 2015  Greater Bridgeport <tibble [25 × 2]> #> 10  2015 2015  Greater New Haven  <tibble [25 × 2]> #> # ℹ 375 more rows  # weights are generally useful in combination with actual data # but unless you unnest in advance, this is messy fetch_cws(code == \"Q4E\",     .year = 2021,     .name = c(\"Greater New Haven\", \"New Haven\"), .unnest = TRUE ) |>     dplyr::left_join(fetch_wts(.unnest = TRUE), by = c(\"year\", \"span\", \"name\", \"group\")) #> # A tibble: 216 × 10 #>     year span  name          code  question category group response value weight #>    <dbl> <chr> <chr>         <chr> <chr>    <fct>    <fct> <fct>    <dbl>  <dbl> #>  1  2021 2021  Greater New … Q4E   The abi… Total    Grea… Excelle…  0.09  1     #>  2  2021 2021  Greater New … Q4E   The abi… Total    Grea… Good      0.39  1     #>  3  2021 2021  Greater New … Q4E   The abi… Total    Grea… Fair      0.26  1     #>  4  2021 2021  Greater New … Q4E   The abi… Total    Grea… Poor      0.07  1     #>  5  2021 2021  Greater New … Q4E   The abi… Total    Grea… Don't k…  0.19  1     #>  6  2021 2021  Greater New … Q4E   The abi… Total    Grea… Refused   0     1     #>  7  2021 2021  Greater New … Q4E   The abi… Gender   Male  Excelle…  0.1   0.471 #>  8  2021 2021  Greater New … Q4E   The abi… Gender   Male  Good      0.41  0.471 #>  9  2021 2021  Greater New … Q4E   The abi… Gender   Male  Fair      0.24  0.471 #> 10  2021 2021  Greater New … Q4E   The abi… Gender   Male  Poor      0.08  0.471 #> # ℹ 206 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/read_xtabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read crosstab data and weights — read_xtabs","title":"Read crosstab data and weights — read_xtabs","text":"two functions facilitate reading Excel spreadsheets crosstabs generated SPSS. Note likely useful working DataHaven Community Wellbeing Survey.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/read_xtabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read crosstab data and weights — read_xtabs","text":"","code":"read_xtabs(   path,   year = NULL,   name_prefix = \"x\",   marker = \"Nature of the [Ss]ample\",   process = FALSE,   verbose = TRUE,   ... )  read_weights(   path,   year = NULL,   marker = \"Nature of the [Ss]ample\",   verbose = TRUE )"},{"path":"https://ct-data-haven.github.io/dcws/reference/read_xtabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read crosstab data and weights — read_xtabs","text":"path Path excel file year Numeric: year survey (end year, case pooled data). tells functions read files, since formatting changed across years survey. ability read file depends much year produced, argument longer defaults specific year. Instead, NULL (default), guessed path. Supplying explicitly better, serves fallback. name_prefix String used create column names x1, x2, x3, ..., Default: 'x' marker String/regex pattern used demarcate crosstabs weight table. NULL, assumed file contains crosstab data weights, filtering done. marker never found, assumed weights headers data, 2021, case different operation done weights table returned. Default: \"Nature [Ss]ample\" process Boolean: FALSE (default), return crosstab data processed, likely passing along xtab2df. TRUE, xtab2df called, receive nice, clean data frame ready analysis. recommended already know sure crosstab data looks like, accidentally lose questions important description. sanity check, see message listing parameters used xtab2df call. verbose Boolean: process true, parameters passed xtab2df printed? Defaults TRUE encourage double check passing arguments intentionally. ... Additional arguments passed xtab2df process = TRUE.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/read_xtabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read crosstab data and weights — read_xtabs","text":"data frame. read_xtabs process = FALSE, one column per demographic/geographic group included, plus one two questions & answers (years single column; others two). process = TRUE, output follows returned xtab2df. read_weights, 2 columns, one demographic groups one associated weights.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/read_xtabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read crosstab data and weights — read_xtabs","text":"","code":"if (interactive()) {     xt <- system.file(\"extdata/test_xtab2018.xlsx\", package = \"dcws\")     read_weights(xt, year = 2018)      # returns a not-very-pretty data frame of the crosstabs to be processed     read_xtabs(xt, year = 2018)     # returns a pretty data frame ready for analysis     read_xtabs(xt, year = 2018, process = TRUE) }"},{"path":"https://ct-data-haven.github.io/dcws/reference/xtab2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"Like read_xtab & read_weights, bespoke function make easier extract data DataHaven Community Wellbeing Survey. Applications crosstabs probably limited unless formatting largely . reading crosstab excel file, xtab2df extracts question codes (e.g. Q4A), question text, categories, demographic groups, joins descriptions survey responses values, making ready analysis. hood 2 versions function: one crosstabs generated SPSS (pre-2024 DCWS), one crosstabs generated DataHaven starting 2024. -house crosstabs categories included headings excel, function add .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/xtab2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"","code":"xtab2df(data, year, col = x1, code_pattern = NULL, verbose = TRUE)"},{"path":"https://ct-data-haven.github.io/dcws/reference/xtab2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"data data frame returned read_xtab. year Numeric: year survey (end year, case pooled data). tells functions read files, since formatting changed across years survey. ability read file depends much year produced, argument longer default; instead must supplied explicitly. col bare column name find question codes text. Default: x1, based names assigned read_xtab code_pattern String: regex pattern denoting find cells contain question code, \"Q10\", \"Q4B\", \"ASTHMA\", split codes question text within cell. pretty finicky, probably want change . NULL (default), function fill \"^[-Z\\\\d_]{2,20}$\" years 2024, \"^[-Z\\\\d_]+(?=\\\\. )\" 2024 onward. verbose Boolean: whether print helpful information console. Defaults TRUE.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/xtab2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"data frame following columns: code (questions codes crosstabs) q_number (questions codes crosstabs, assigned order occur) question category (e.g. age, gender) group (e.g. 18–34, male) response value","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/xtab2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract survey data and descriptions from crosstabs into a tidy data frame — xtab2df","text":"","code":"if (interactive()) {     xt <- system.file(\"extdata/test_xtab2018.xlsx\", package = \"dcws\")     xtab <- read_xtabs(xt, year = 2018)     xtab2df(xtab, year = 2018) }"},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-015","dir":"Changelog","previous_headings":"","what":"dcws 0.1.5","title":"dcws 0.1.5","text":"Add indicator definitions –> cws_defs","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-014","dir":"Changelog","previous_headings":"","what":"dcws 0.1.4","title":"dcws 0.1.4","text":"Add 2022 statewide crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-013","dir":"Changelog","previous_headings":"","what":"dcws 0.1.3","title":"dcws 0.1.3","text":"Add 2021 crosstabs Switch cli package messaging","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-012","dir":"Changelog","previous_headings":"","what":"dcws 0.1.2","title":"dcws 0.1.2","text":"Update several 2021 crosstabs Add vignette locations left cws_full_data","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-011","dir":"Changelog","previous_headings":"","what":"dcws 0.1.1","title":"dcws 0.1.1","text":"Better ordering group levels Add .drop_ct argument fetch_cws Update vignette","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-010","dir":"Changelog","previous_headings":"","what":"dcws 0.1.0","title":"dcws 0.1.0","text":"First full build vignette 🎉","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-0009000","dir":"Changelog","previous_headings":"","what":"dcws 0.0.0.9000","title":"dcws 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"fix-0-1-6","dir":"Changelog","previous_headings":"","what":"Fix","title":"dcws v0.1.6 (2025-02-26)","text":"clean_cws_lvls: yet another set regex changes cleaning levels clean_cws_lvls still missing pattern","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"fix-0-1-5-9000","dir":"Changelog","previous_headings":"","what":"Fix","title":"dcws v0.1.5.9000 (2025-01-27)","text":"better pattern matching clean_cws_lvls","code":""}]
