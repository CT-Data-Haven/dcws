[{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching_dcws_data.html","id":"one-question-one-year-few-categories","dir":"Articles","previous_headings":"Analysis","what":"One question, one year, few categories","title":"Fetching DCWS data","text":"","code":"food_21 <- fetch_cws(grepl(\"Have there been times .+ food\", question),            .name = \"Greater New Haven\", .category = c(\"Total\", \"Race/Ethnicity\", \"Gender\"),           .year = 2021, .unnest = TRUE) %>%   calc_food()  knitr::kable(food_21)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching_dcws_data.html","id":"one-question-several-years-one-location","dir":"Articles","previous_headings":"Analysis","what":"One question, several years, one location","title":"Fetching DCWS data","text":"","code":"food_trend <- fetch_cws(grepl(\"Have there been times .+ food\", question),            .name = \"Greater New Haven\", .category = c(\"Total\", \"Race/Ethnicity\", \"Gender\"),           .unnest = TRUE) %>%   calc_food()  knitr::kable(food_trend)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching_dcws_data.html","id":"one-question-one-year-compare-groups-and-locations","dir":"Articles","previous_headings":"Analysis","what":"One question, one year, compare groups and locations","title":"Fetching DCWS data","text":"want just location-wide values towns Greater New Haven, race Greater New Haven. filtering inside fetch_cws wanted dig nested data purrr, don’t, ’ll just little redundant.","code":"food_towns <- fetch_cws(grepl(\"Have there been times .+ food\", question),            .name = c(\"Greater New Haven\", cwi::regions$`Greater New Haven`),           .year = 2021, .unnest = TRUE) %>%   filter((name == \"Greater New Haven\" & category %in% c(\"Total\", \"Race/Ethnicity\")) |            (group %in% cwi::regions$`Greater New Haven`)) %>%   calc_food() %>%   mutate(category = as_factor(ifelse(name == \"Greater New Haven\",                                       as.character(category),                                      \"By town\")))  knitr::kable(food_towns)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching_dcws_data.html","id":"several-questions-with-same-responses","dir":"Articles","previous_headings":"Analysis","what":"Several questions with same responses","title":"Fetching DCWS data","text":"Usually like analyze questions separately might set responses, bank related questions can . 2020 2021 added question trust several types institutions. can’t remember codes “trust” question text. Oh duh, codes “TRUST” letter! type lookup table / function useful, can add one, ’s pretty simple fly. responses questions great deal, fair amount, much, none . ’m going collapse great deal fair amount one, present just . question beginning text, end names institution asked . Lots ways chop data now ’ve got several groups several questions together.","code":"fetch_cws(grepl(\"[Tt]rust\", question), .year = 2021) %>%   distinct(code, question) #> # A tibble: 7 × 2 #>   code   question                                                                #>   <chr>  <chr>                                                                   #> 1 TRUSTA How much trust do you have in each of the following to look out for th… #> 2 TRUSTB How much trust do you have in each of the following to look out for th… #> 3 TRUSTC How much trust do you have in each of the following to look out for th… #> 4 TRUSTD How much trust do you have in each of the following to look out for th… #> 5 TRUSTE How much trust do you have in each of the following to look out for th… #> 6 Q17G   People in this neighborhood can be trusted.                             #> 7 CVAX10 (If not vaccinated) How concerned are you, if at all, that you won't b… trust_insts <- fetch_cws(grepl(\"^TRUST[A-Z]$\", code), .name = \"Greater New Haven\", .year = 2021,           .category = c(\"Total\", \"Age\"), .unnest = TRUE) %>%   mutate(response = fct_collapse(response, trust = c(\"A great deal\", \"A fair amount\")),          question = stringr::str_extract(question, \"([\\\\w\\\\s]+)$\") %>%            trimws() %>%            as_factor(),          group = fct_inorder(fct_drop(group))) %>%   group_by(category, group, question, response) %>%   summarise(value = sum(value)) %>%   sub_nonanswers() %>%   filter(response == \"trust\") %>%   ungroup()  knitr::kable(trust_insts)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching_dcws_data.html","id":"weights","dir":"Articles","previous_headings":"","what":"Weights","title":"Fetching DCWS data","text":"crosstabs table survey weights group, either standalone section bottom Excel spreadsheet couple rows top question. cwi::read_weights now works either formats; latter, weights taken first question (always satisfied area question, every participant receives). Just like preparing package meant extracting data, ’s also stash weights files. useful operations like collapsing multiple small groups larger ones, usually income brackets groupings may consistent years locations otherwise. ’s function getting weights , arguments getting data… …can just use .add_wts argument fetch_cws . can also use cwi::collapse_n_wt help calculation, basically ’re collapsing several levels, getting weighted means. One reason ’ve moved toward larger income brackets retain decent sample sizes, recalculated match brackets used 2021.","code":"head(fetch_wts(.year = 2021, .name = \"Greater New Haven\", .unnest = TRUE)) #> # A tibble: 6 × 4 #>    year name              group             weight #>   <dbl> <chr>             <fct>              <dbl> #> 1  2021 Greater New Haven Connecticut        1     #> 2  2021 Greater New Haven Greater New Haven  1     #> 3  2021 Greater New Haven Male               0.471 #> 4  2021 Greater New Haven Female             0.529 #> 5  2021 Greater New Haven Ages 18-34         0.313 #> 6  2021 Greater New Haven Ages 35-49         0.238 asthma18 <- fetch_cws(question == \"Asthma\", .year = 2018, .name = \"Greater New Haven\",            .category = c(\"Total\", \"Income\", \"Race/Ethnicity\"), .add_wts = TRUE, .unnest = TRUE) %>%   collapse_n_wt(year:response,                 .lvls = list(\"<$30K\" = c(\"<$15K\", \"$15K-$30K\"),                              \"$30K-$100K\" = c(\"$30K-$50K\", \"$50K-$75K\", \"$75K-$100K\"),                              \"$100K+\" = c(\"$100K-$200K\", \"$200K+\"))) %>%   sub_nonanswers() %>%   filter(response == \"Yes\")  knitr::kable(asthma18)"},{"path":"https://ct-data-haven.github.io/dcws/articles/fetching_dcws_data.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Fetching DCWS data","text":"’s ! Usually ’ll save bunch related analyses lists data frames, write rds files easy loading.","code":""},{"path":"https://ct-data-haven.github.io/dcws/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Seaberry. Author, maintainer.","code":""},{"path":"https://ct-data-haven.github.io/dcws/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaberry C (2022). dcws: Data DataHaven Community Wellbeing Survey. R package version 0.1.0.","code":"@Manual{,   title = {dcws: Data from the DataHaven Community Wellbeing Survey},   author = {Camille Seaberry},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"https://ct-data-haven.github.io/dcws/index.html","id":"dcws","dir":"","previous_headings":"","what":"Data from the DataHaven Community Wellbeing Survey","title":"Data from the DataHaven Community Wellbeing Survey","text":"small data-focused package make easier use DataHaven Community Wellbeing Survey. contains data extracted crosstabs 2015, 2018, 2020 (statewide ), 2021 survey waves.","code":""},{"path":"https://ct-data-haven.github.io/dcws/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data from the DataHaven Community Wellbeing Survey","text":"can install development version dcws GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"CT-Data-Haven/dcws\")"},{"path":"https://ct-data-haven.github.io/dcws/index.html","id":"included-data","dir":"","previous_headings":"","what":"Included data","title":"Data from the DataHaven Community Wellbeing Survey","text":"2022-01-19, data included :","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_lvls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up categories and groups from crosstabs — clean_lvls","title":"Clean up categories and groups from crosstabs — clean_lvls","text":"bunch string cleaning standardize categories (Gender, Age, etc) groups (Male, Ages 65+, etc) across available crosstabs. operation categories groups overlap; therefore, warnings suppressed otherwise noisy.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_lvls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up categories and groups from crosstabs — clean_lvls","text":"","code":"clean_lvls(x)"},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_lvls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up categories and groups from crosstabs — clean_lvls","text":"x vector. factor already, coerced one.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_lvls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up categories and groups from crosstabs — clean_lvls","text":"factor","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/clean_lvls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up categories and groups from crosstabs — clean_lvls","text":"","code":"# vector of strings as read in from crosstabs categories <- c(\"Connecticut\", \"NH Inner Ring\", \"Gender\", \"Age\",                 \"Race/Ethnicity\", \"Education\", \"Income\", \"Children in HH\") levels(clean_lvls(categories)) #> [1] \"Connecticut\"          \"New Haven Inner Ring\" \"Gender\"               #> [4] \"Age\"                  \"Race/Ethnicity\"       \"Education\"            #> [7] \"Income\"               \"With children\"         groups <- c(\"M\", \"F\", \"18-34\", \"35 to 49\", \"65 and older\",             \"Black/Afr Amer\", \"African American/Black\", \"High School\",             \"Less than $15,000\", \"$15,000 to $30,000\", \"No\") levels(clean_lvls(groups)) #>  [1] \"Male\"        \"Female\"      \"Ages 18-34\"  \"Ages 35-49\"  \"Ages 65+\"    #>  [6] \"Black\"       \"High school\" \"<$15K\"       \"$15K-$30K\"   \"No kids\""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"nested data frame row corresponds year location survey. data column contains full set data extracted respective crosstabs; , turn, nested question question code. bit strange format, balances ease subsetting year location saving space avoiding repeated values (e.g. listing full question text dozens times).","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"","code":"cws_full_data"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"data frame 73 rows 3 columns.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"outer-structure-","dir":"Reference","previous_headings":"","what":"Outer structure:","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"year Numeric, year survey name Text location survey List-column data frames survey response data. number rows varies based questions participant groups available, 3 columns .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"for-the-survey-list-column-","dir":"Reference","previous_headings":"","what":"For the survey list-column:","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"code Question code, e.g. \"Q2\", \"Q4E\", \"RENTEVICT\" question Full text survey question data List-column data frames, providing actual response values per question. , number rows varies, 4 columns .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"for-the-data-list-column-","dir":"Reference","previous_headings":"","what":"For the data list-column:","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"category Factor: participant group categories, e.g. \"Gender\", \"Age\" group Factor: participant group, e.g. \"Male\", \"Ages 65+\" response Text responses, depending question value Share participants giving response","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"Compiled DCWS crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":", structure probably annoying. Easier extraction available using fetch_cws.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contents of DataHaven Community Wellbeing Crosstabs — cws_full_data","text":"","code":"# bunch of different ways to work with this # specific question for one location and one year cws_full_data %>%   dplyr::filter(year == 2018, name == \"Greater New Haven\") %>%   tidyr::unnest(survey) %>%   dplyr::filter(grepl(\"suitable employment\", question)) %>%   tidyr::unnest(data) #> # A tibble: 138 × 8 #>     year name              code  question        category  group  response value #>    <dbl> <chr>             <chr> <chr>           <fct>     <fct>  <chr>    <dbl> #>  1  2018 Greater New Haven Q4E   The ability of… Total     Conne… Excelle…  0.09 #>  2  2018 Greater New Haven Q4E   The ability of… Total     Great… Excelle…  0.08 #>  3  2018 Greater New Haven Q4E   The ability of… Gender    Male   Excelle…  0.08 #>  4  2018 Greater New Haven Q4E   The ability of… Gender    Female Excelle…  0.08 #>  5  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.11 #>  6  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.09 #>  7  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.06 #>  8  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.06 #>  9  2018 Greater New Haven Q4E   The ability of… Race/Eth… White  Excelle…  0.07 #> 10  2018 Greater New Haven Q4E   The ability of… Race/Eth… Black  Excelle…  0.09 #> # … with 128 more rows  # simpler but a bit slower--has to unnest to full 600k rows cws_full_data %>%   tidyr::unnest(survey) %>%   tidyr::unnest(data) %>%   dplyr::filter(year == 2018,                 name == \"Greater New Haven\",                 grepl(\"suitable employment\", question)) #> # A tibble: 138 × 8 #>     year name              code  question        category  group  response value #>    <dbl> <chr>             <chr> <chr>           <fct>     <fct>  <chr>    <dbl> #>  1  2018 Greater New Haven Q4E   The ability of… Total     Conne… Excelle…  0.09 #>  2  2018 Greater New Haven Q4E   The ability of… Total     Great… Excelle…  0.08 #>  3  2018 Greater New Haven Q4E   The ability of… Gender    Male   Excelle…  0.08 #>  4  2018 Greater New Haven Q4E   The ability of… Gender    Female Excelle…  0.08 #>  5  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.11 #>  6  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.09 #>  7  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.06 #>  8  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.06 #>  9  2018 Greater New Haven Q4E   The ability of… Race/Eth… White  Excelle…  0.07 #> 10  2018 Greater New Haven Q4E   The ability of… Race/Eth… Black  Excelle…  0.09 #> # … with 128 more rows  # specific question, one location, multiple years cws_full_data %>%   dplyr::mutate(survey = purrr::map(survey, dplyr::filter, question == \"Diabetes\")) %>%   dplyr::filter(name == \"New Haven\") %>%   tidyr::unnest(survey) %>%   tidyr::unnest(data) #> # A tibble: 236 × 8 #>     year name      code  question category       group       response value #>    <dbl> <chr>     <chr> <chr>    <fct>          <fct>       <chr>    <dbl> #>  1  2015 New Haven Q23C  Diabetes Total          Connecticut Yes       0.09 #>  2  2015 New Haven Q23C  Diabetes Total          New Haven   Yes       0.1  #>  3  2015 New Haven Q23C  Diabetes Gender         Male        Yes       0.09 #>  4  2015 New Haven Q23C  Diabetes Gender         Female      Yes       0.12 #>  5  2015 New Haven Q23C  Diabetes Age            Ages 18-34  Yes       0.01 #>  6  2015 New Haven Q23C  Diabetes Age            Ages 35-49  Yes       0.08 #>  7  2015 New Haven Q23C  Diabetes Age            Ages 50-64  Yes       0.27 #>  8  2015 New Haven Q23C  Diabetes Age            Ages 65+    Yes       0.24 #>  9  2015 New Haven Q23C  Diabetes Race/Ethnicity White       Yes       0.07 #> 10  2015 New Haven Q23C  Diabetes Race/Ethnicity Black       Yes       0.15 #> # … with 226 more rows  # make things easier with fetch_cws: flexibly grab by location, year, and/or # filter conditions fetch_cws(grepl(\"Have there been times .+ food\", question), .year = 2018,           .name = c(\"Connecticut\", \"Greater New Haven\", \"New Haven\")) #> # A tibble: 3 × 5 #>    year name              code  question                               data      #>   <dbl> <chr>             <chr> <chr>                                  <list>    #> 1  2018 Connecticut       Q62   Have there been times in the past 12 … <tibble … #> 2  2018 Greater New Haven Q62   Have there been times in the past 12 … <tibble … #> 3  2018 New Haven         Q62   Have there been times in the past 12 … <tibble …"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS weights — cws_full_wts","title":"DCWS weights — cws_full_wts","text":"nested data frame containing survey's weights, used combining groups calculate average values. can joined DCWS data fetch_cws, manually. Note larger areas 2018 (maybe also 2015), groups might line data weights--check NAs weights column need .","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS weights — cws_full_wts","text":"","code":"cws_full_wts"},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS weights — cws_full_wts","text":"data frame 87 rows 3 variables: year Numeric, year survey name Text location weights list nested data frames, 2 columns group weight.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/cws_full_wts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS weights — cws_full_wts","text":"Compiled DCWS crosstabs","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and subset DCWS data — fetch_cws","title":"Fetch and subset DCWS data — fetch_cws","text":"function returns doubly-nested data cws_full_data nicer format, options subsetting. Filtering year, location name, category named options, take vector one values, valid conditions can passed ... flexible filtering. named options, NULL, default, mean filtering done column.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and subset DCWS data — fetch_cws","text":"","code":"fetch_cws(   ...,   .year = NULL,   .name = NULL,   .category = NULL,   .unnest = FALSE,   .add_wts = FALSE )"},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and subset DCWS data — fetch_cws","text":"... number conditions filter , passed dplyr::filter. override named options, filter year > 2020 set .year = 2015 going get data. .year vector one numbers giving year(s) subset . NULL, filtering done year. .name vector one strings giving name(s) subset . NULL, filtering done name. .category vector one strings giving category(ies) subset . NULL, filtering done category. .unnest Logical: data column unnested? just saves step calling tidyr::unnest defaults false. .add_wts Logical: groups' survey weights attached, via left-join dcws::cws_full_wts? useful need collapse groups later; otherwise might get stuck annoying tidyr::unnest messes.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and subset DCWS data — fetch_cws","text":"data frame, 5 9 columns, depending arguments. Columns year, name, code, question always included. Additional columns:","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_cws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and subset DCWS data — fetch_cws","text":"","code":"# no filtering fetch_cws() #> # A tibble: 10,274 × 5 #>     year name  code  question                                        data        #>    <dbl> <chr> <chr> <chr>                                           <list>      #>  1  2015 5CT   Q1    Are you satisfied with the city or area where … <tibble [2… #>  2  2015 5CT   Q2    As a place to live, is the city or area where … <tibble [4… #>  3  2015 5CT   Q3A   How responsive local government is to the need… <tibble [3… #>  4  2015 5CT   Q3B   The availability of the goods and services tha… <tibble [3… #>  5  2015 5CT   Q3C   The job done by the police to keep residents s… <tibble [3… #>  6  2015 5CT   Q3D   The ability of residents to obtain suitable em… <tibble [3… #>  7  2015 5CT   Q3E   As a place to raise children                    <tibble [3… #>  8  2015 5CT   Q3F   The condition of public parks and other public… <tibble [3… #>  9  2015 5CT   Q4    Over the past 12 months, have you volunteered … <tibble [2… #> 10  2015 5CT   Q5    How would you describe your ability to influen… <tibble [3… #> # … with 10,264 more rows  # filter by year, name, and/or category fetch_cws(.name = c(\"Greater New Haven\", \"New Haven\")) # all years #> # A tibble: 843 × 5 #>     year name              code  question                             data       #>    <dbl> <chr>             <chr> <chr>                                <list>     #>  1  2015 Greater New Haven Q1    Are you satisfied with the city or … <tibble [… #>  2  2015 Greater New Haven Q2    As a place to live, is the city or … <tibble [… #>  3  2015 Greater New Haven Q3A   How responsive local government is … <tibble [… #>  4  2015 Greater New Haven Q3B   The availability of the goods and s… <tibble [… #>  5  2015 Greater New Haven Q3C   The job done by the police to keep … <tibble [… #>  6  2015 Greater New Haven Q3D   The ability of residents to obtain … <tibble [… #>  7  2015 Greater New Haven Q3E   As a place to raise children         <tibble [… #>  8  2015 Greater New Haven Q3F   The condition of public parks and o… <tibble [… #>  9  2015 Greater New Haven Q4    Over the past 12 months, have you v… <tibble [… #> 10  2015 Greater New Haven Q5    How would you describe your ability… <tibble [… #> # … with 833 more rows fetch_cws(.year = 2018, .name = c(\"Greater New Haven\", \"New Haven\")) #> # A tibble: 297 × 5 #>     year name              code  question                             data       #>    <dbl> <chr>             <chr> <chr>                                <list>     #>  1  2018 Greater New Haven Q1    Are you satisfied with the city or … <tibble [… #>  2  2018 Greater New Haven Q2    As a place to live, is the city or … <tibble [… #>  3  2018 Greater New Haven Q4A   How responsive local government is … <tibble [… #>  4  2018 Greater New Haven Q4D   The job done by the police to keep … <tibble [… #>  5  2018 Greater New Haven Q4E   The ability of residents to obtain … <tibble [… #>  6  2018 Greater New Haven Q4F   As a place to raise children         <tibble [… #>  7  2018 Greater New Haven Q4G   The condition of public parks and o… <tibble [… #>  8  2018 Greater New Haven Q4H   The availability of affordable, hig… <tibble [… #>  9  2018 Greater New Haven Q5    Over the past 12 months, have you v… <tibble [… #> 10  2018 Greater New Haven Q6    How would you describe your ability… <tibble [… #> # … with 287 more rows fetch_cws(.year = 2021, .name = \"New Haven\", .category = c(\"Total\", \"Age\", \"Gender\")) #> # A tibble: 166 × 5 #>     year name      code   question                                    data       #>    <dbl> <chr>     <chr>  <chr>                                       <list>     #>  1  2021 New Haven Q1     Are you satisfied with the city or area wh… <tibble [… #>  2  2021 New Haven Q2     As a place to live, is the city or area wh… <tibble [… #>  3  2021 New Haven Q4A    How responsive local government is to the … <tibble [… #>  4  2021 New Haven Q4D    The job done by the police to keep residen… <tibble [… #>  5  2021 New Haven Q4E    The ability of residents to obtain suitabl… <tibble [… #>  6  2021 New Haven Q4F    As a place to raise children                <tibble [… #>  7  2021 New Haven Q4G    The condition of public parks and other pu… <tibble [… #>  8  2021 New Haven Q4H    The availability of affordable, high-quali… <tibble [… #>  9  2021 New Haven Q6     How would you describe your ability to inf… <tibble [… #> 10  2021 New Haven TRUSTA How much trust do you have in each of the … <tibble [… #> # … with 156 more rows  # filter by conditions fetch_cws(code == \"Q4E\", .year = 2018, .name = c(\"Greater New Haven\", \"New Haven\"), .unnest = TRUE) #> # A tibble: 252 × 8 #>     year name              code  question        category  group  response value #>    <dbl> <chr>             <chr> <chr>           <fct>     <fct>  <chr>    <dbl> #>  1  2018 Greater New Haven Q4E   The ability of… Total     Conne… Excelle…  0.09 #>  2  2018 Greater New Haven Q4E   The ability of… Total     Great… Excelle…  0.08 #>  3  2018 Greater New Haven Q4E   The ability of… Gender    Male   Excelle…  0.08 #>  4  2018 Greater New Haven Q4E   The ability of… Gender    Female Excelle…  0.08 #>  5  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.11 #>  6  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.09 #>  7  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.06 #>  8  2018 Greater New Haven Q4E   The ability of… Age       Ages … Excelle…  0.06 #>  9  2018 Greater New Haven Q4E   The ability of… Race/Eth… White  Excelle…  0.07 #> 10  2018 Greater New Haven Q4E   The ability of… Race/Eth… Black  Excelle…  0.09 #> # … with 242 more rows fetch_cws(grepl(\"Q4[A-Z]\", code), .year = 2018, .name = c(\"Greater New Haven\", \"New Haven\")) #> # A tibble: 12 × 5 #>     year name              code  question                             data       #>    <dbl> <chr>             <chr> <chr>                                <list>     #>  1  2018 Greater New Haven Q4A   How responsive local government is … <tibble [… #>  2  2018 Greater New Haven Q4D   The job done by the police to keep … <tibble [… #>  3  2018 Greater New Haven Q4E   The ability of residents to obtain … <tibble [… #>  4  2018 Greater New Haven Q4F   As a place to raise children         <tibble [… #>  5  2018 Greater New Haven Q4G   The condition of public parks and o… <tibble [… #>  6  2018 Greater New Haven Q4H   The availability of affordable, hig… <tibble [… #>  7  2018 New Haven         Q4A   How responsive local government is … <tibble [… #>  8  2018 New Haven         Q4D   The job done by the police to keep … <tibble [… #>  9  2018 New Haven         Q4E   The ability of residents to obtain … <tibble [… #> 10  2018 New Haven         Q4F   As a place to raise children         <tibble [… #> 11  2018 New Haven         Q4G   The condition of public parks and o… <tibble [… #> 12  2018 New Haven         Q4H   The availability of affordable, hig… <tibble [… fetch_cws(grepl(\"health insurance\", question), year > 2015, .name = \"New Haven\") #> # A tibble: 6 × 5 #>    year name      code  question                                    data         #>   <dbl> <chr>     <chr> <chr>                                       <list>       #> 1  2018 New Haven Q26   Do you have health insurance?               <tibble [76… #> 2  2018 New Haven Q27   (If have health insurance) What type of he… <tibble [12… #> 3  2018 New Haven Q30B  The doctor or hospital wouldn't accept you… <tibble [8 … #> 4  2021 New Haven Q26   Do you have health insurance?               <tibble [76… #> 5  2021 New Haven Q27   (If yes) What type of health insurance do … <tibble [16… #> 6  2021 New Haven Q30B  The doctor or hospital wouldn't accept you… <tibble [4 … fetch_cws(question %in% c(\"Diabetes\", \"Asthma\"), .name = \"Bridgeport\") #> # A tibble: 6 × 5 #>    year name       code  question data              #>   <dbl> <chr>      <chr> <chr>    <list>            #> 1  2015 Bridgeport Q23C  Diabetes <tibble [84 × 4]> #> 2  2015 Bridgeport Q23E  Asthma   <tibble [84 × 4]> #> 3  2018 Bridgeport Q23C  Diabetes <tibble [76 × 4]> #> 4  2018 Bridgeport Q23E  Asthma   <tibble [76 × 4]> #> 5  2021 Bridgeport Q23C  Diabetes <tibble [76 × 4]> #> 6  2021 Bridgeport Q23E  Asthma   <tibble [76 × 4]>  # how you might use this to make a beautiful table fetch_cws(code == \"Q1\", .year = 2021, .category = c(\"Income\", \"Gender\"), .unnest = TRUE) %>%   dplyr::group_by(name, category, group) %>%   cwi::sub_nonanswers() %>%   dplyr::filter(response == \"Yes\") %>%   tidyr::pivot_wider(id_cols = name, names_from = group, values_from = value) #> # A tibble: 19 × 6 #> # Groups:   name [19] #>    name                    Male Female `<$30K` `$30K-$100K` `$100K+` #>    <chr>                  <dbl>  <dbl>   <dbl>        <dbl>    <dbl> #>  1 Bridgeport             0.788  0.778   0.758        0.778    0.814 #>  2 Connecticut            0.888  0.889   0.798        0.879    0.919 #>  3 Fairfield              0.88   0.88    0.69         0.79     0.96  #>  4 Fairfield County       0.87   0.899   0.798        0.889    0.929 #>  5 Greater Hartford       0.898  0.89    0.828        0.908    0.960 #>  6 Greater New Haven      0.869  0.879   0.828        0.899    0.87  #>  7 Greenwich              0.89   0.980   0.94         0.929    0.939 #>  8 Groton                 0.78   0.884   0.835        0.74     0.89  #>  9 Hartford               0.716  0.75    0.673        0.760    0.818 #> 10 Lower Naugatuck Valley 0.86   0.929   0.85         0.888    0.95  #> 11 Middlesex County       0.92   0.94    0.77         0.93     0.96  #> 12 Milford                0.88   0.929   0.89         0.929    0.86  #> 13 New Haven              0.818  0.838   0.765        0.828    0.929 #> 14 New London             0.908  0.859   0.88         0.939    0.72  #> 15 Stamford               0.9    0.908   0.869        0.929    0.9   #> 16 Stratford              0.84   0.928   0.74         0.918    0.89  #> 17 Trumbull               0.87   0.949   0.85         0.94     0.85  #> 18 Waterbury              0.74   0.670   0.55         0.737    0.81  #> 19 West Haven             0.711  0.939   0.918        0.773    0.806  # adding weights to collapse groups (e.g. combining income brackets) fetch_cws(code == \"Q1\", .year = 2021, .add_wts = TRUE) #> # A tibble: 20 × 5 #>     year name                   code  question                        data       #>    <dbl> <chr>                  <chr> <chr>                           <list>     #>  1  2021 Bridgeport             Q1    Are you satisfied with the cit… <tibble [… #>  2  2021 Connecticut            Q1    Are you satisfied with the cit… <tibble [… #>  3  2021 Fairfield              Q1    Are you satisfied with the cit… <tibble [… #>  4  2021 Fairfield County       Q1    Are you satisfied with the cit… <tibble [… #>  5  2021 Greater Hartford       Q1    Are you satisfied with the cit… <tibble [… #>  6  2021 Greater New Haven      Q1    Are you satisfied with the cit… <tibble [… #>  7  2021 Greenwich              Q1    Are you satisfied with the cit… <tibble [… #>  8  2021 Groton                 Q1    Are you satisfied with the cit… <tibble [… #>  9  2021 Hartford               Q1    Are you satisfied with the cit… <tibble [… #> 10  2021 Lower Naugatuck Valley Q1    Are you satisfied with the cit… <tibble [… #> 11  2021 Middlesex County       Q1    Are you satisfied with the cit… <tibble [… #> 12  2021 Milford                Q1    Are you satisfied with the cit… <tibble [… #> 13  2021 Monroe                 Q1    Are you satisfied with the cit… <tibble [… #> 14  2021 New Haven              Q1    Are you satisfied with the cit… <tibble [… #> 15  2021 New London             Q1    Are you satisfied with the cit… <tibble [… #> 16  2021 Stamford               Q1    Are you satisfied with the cit… <tibble [… #> 17  2021 Stratford              Q1    Are you satisfied with the cit… <tibble [… #> 18  2021 Trumbull               Q1    Are you satisfied with the cit… <tibble [… #> 19  2021 Waterbury              Q1    Are you satisfied with the cit… <tibble [… #> 20  2021 West Haven             Q1    Are you satisfied with the cit… <tibble [… fetch_cws(.year = 2021, .name = \"New Haven\", .category = c(\"Total\", \"Age\", \"Income\"),           .add_wts = TRUE, .unnest = TRUE) #> # A tibble: 4,205 × 9 #>     year name      code  question          category group  response value weight #>    <dbl> <chr>     <chr> <chr>             <fct>    <fct>  <chr>    <dbl>  <dbl> #>  1  2021 New Haven Q1    Are you satisfie… Total    Conne… Yes       0.87  1     #>  2  2021 New Haven Q1    Are you satisfie… Total    New H… Yes       0.82  1     #>  3  2021 New Haven Q1    Are you satisfie… Age      Ages … Yes       0.8   0.456 #>  4  2021 New Haven Q1    Are you satisfie… Age      Ages … Yes       0.82  0.219 #>  5  2021 New Haven Q1    Are you satisfie… Age      Ages … Yes       0.83  0.151 #>  6  2021 New Haven Q1    Are you satisfie… Age      Ages … Yes       0.88  0.173 #>  7  2021 New Haven Q1    Are you satisfie… Income   <$30K  Yes       0.75  0.325 #>  8  2021 New Haven Q1    Are you satisfie… Income   $30K-… Yes       0.82  0.515 #>  9  2021 New Haven Q1    Are you satisfie… Income   $100K+ Yes       0.92  0.16  #> 10  2021 New Haven Q1    Are you satisfie… Total    Conne… No        0.12  1     #> # … with 4,195 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and subset weights for DCWS data — fetch_wts","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"function returns nested cws_full_wts data, meant counterpart fetch_cws.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"","code":"fetch_wts(..., .year = NULL, .name = NULL, .unnest = FALSE)"},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"... number conditions filter , passed dplyr::filter. override named options, filter year > 2020 set .year = 2015 going get data. .year vector one numbers giving year(s) subset . NULL, filtering done year. .name vector one strings giving name(s) subset . NULL, filtering done name. .unnest Logical: data column unnested? just saves step calling tidyr::unnest defaults false.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"data frame, either 3 columns (.unnest = FALSE) 4 columns (.unnest = TRUE). .unnest = FALSE: columns year, name, list nested data frames weights .unnest = TRUE: year, name, group, weight","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/dcws/reference/fetch_wts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch and subset weights for DCWS data — fetch_wts","text":"","code":"# no filtering fetch_wts() #> # A tibble: 87 × 3 #>     year name               weights           #>    <dbl> <chr>              <list>            #>  1  2015 5CT                <tibble [2 × 2]>  #>  2  2015 Bridgeport         <tibble [21 × 2]> #>  3  2015 Bristol            <tibble [14 × 2]> #>  4  2015 Greater Waterbury  <tibble [25 × 2]> #>  5  2015 Connecticut        <tibble [27 × 2]> #>  6  2015 Greater Hartford   <tibble [24 × 2]> #>  7  2015 Danbury            <tibble [18 × 2]> #>  8  2015 Fairfield County   <tibble [27 × 2]> #>  9  2015 Greater Bridgeport <tibble [25 × 2]> #> 10  2015 Greater New Haven  <tibble [25 × 2]> #> # … with 77 more rows  # weights are generally useful in combination with actual data # but unless you unnest in advance, this is messy fetch_cws(code == \"Q4E\", .year = 2021,           .name = c(\"Greater New Haven\", \"New Haven\"), .unnest = TRUE) %>%   dplyr::left_join(fetch_wts(.unnest = TRUE), by = c(\"year\", \"name\", \"group\")) #> # A tibble: 228 × 9 #>     year name              code  question   category group response value weight #>    <dbl> <chr>             <chr> <chr>      <fct>    <fct> <chr>    <dbl>  <dbl> #>  1  2021 Greater New Haven Q4E   The abili… Total    Conn… Excelle…  0.13  1     #>  2  2021 Greater New Haven Q4E   The abili… Total    Grea… Excelle…  0.09  1     #>  3  2021 Greater New Haven Q4E   The abili… Gender   Male  Excelle…  0.1   0.471 #>  4  2021 Greater New Haven Q4E   The abili… Gender   Fema… Excelle…  0.08  0.529 #>  5  2021 Greater New Haven Q4E   The abili… Age      Ages… Excelle…  0.08  0.313 #>  6  2021 Greater New Haven Q4E   The abili… Age      Ages… Excelle…  0.1   0.238 #>  7  2021 Greater New Haven Q4E   The abili… Age      Ages… Excelle…  0.09  0.194 #>  8  2021 Greater New Haven Q4E   The abili… Age      Ages… Excelle…  0.1   0.255 #>  9  2021 Greater New Haven Q4E   The abili… Race/Et… White Excelle…  0.11  0.677 #> 10  2021 Greater New Haven Q4E   The abili… Race/Et… Black Excelle…  0.06  0.163 #> # … with 218 more rows"},{"path":"https://ct-data-haven.github.io/dcws/reference/group_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"DCWS group metadata — group_meta","title":"DCWS group metadata — group_meta","text":"reference dataset listing categories groups available survey year location. questions available groups.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/group_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DCWS group metadata — group_meta","text":"","code":"group_meta"},{"path":"https://ct-data-haven.github.io/dcws/reference/group_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DCWS group metadata — group_meta","text":"data frame 82 rows 3 variables: year Numeric, year survey name Text location groups list nested data frames, 2 columns category group.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/group_meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"DCWS group metadata — group_meta","text":"Compiled DCWS crosstabs","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ct-data-haven.github.io/dcws/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ct-data-haven.github.io/dcws/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way. enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions). simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[. Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround. Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually : Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-010","dir":"Changelog","previous_headings":"","what":"dcws 0.1.0","title":"dcws 0.1.0","text":"First full build vignette 🎉","code":""},{"path":"https://ct-data-haven.github.io/dcws/news/index.html","id":"dcws-0009000","dir":"Changelog","previous_headings":"","what":"dcws 0.0.0.9000","title":"dcws 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
